---
- name: Create tinymediamanager group
  become: true
  register: tinymediamanager_group_result
  ansible.builtin.group:
    name: "{{ tinymediamanager_group }}"

- name: Create tinymediamanager user
  become: true
  register: tinymediamanager_user_result
  ansible.builtin.user:
    name: "{{ tinymediamanager_user }}"
    group: "{{ tinymediamanager_group }}"
    state: present
    create_home: true
    home: "{{ tinymediamanager_home }}"

- name: Set uid/gid fact
  ansible.builtin.set_fact:
    tinymediamanager_gid: "{{ tinymediamanager_group_result.gid }}"
    tinymediamanager_uid: "{{ tinymediamanager_user_result.uid }}"

- name: Enable linger for tinymediamanager user
  become: true
  ansible.builtin.command:
    cmd: loginctl enable-linger "{{ tinymediamanager_user }}"
    creates: /var/lib/systemd/linger/{{ tinymediamanager_user }}

- name: Create quadlet directory
  become: true
  become_user: "{{ tinymediamanager_user }}"
  ansible.builtin.file:
    path: "{{ directory }}"
    state: directory
    owner: "{{ tinymediamanager_user }}"
    group: "{{ tinymediamanager_group }}"
    mode: "0755"
  loop_control:
    loop_var: directory
  loop:
    - "{{ tinymediamanager_home }}/.config"
    - "{{ tinymediamanager_home }}/.config/containers"
    - "{{ tinymediamanager_home }}/.config/containers/systemd"

- name: Generate quadlet files
  become: true
  become_user: "{{ tinymediamanager_user }}"
  notify: Restart tinymediamanager containers
  register: tinymediamanager_quadlet_result
  ansible.builtin.template:
    src: "{{ template }}"
    dest: "{{ tinymediamanager_home }}/.config/containers/systemd/{{ template }}"
    owner: "{{ tinymediamanager_user }}"
    group: "{{ tinymediamanager_group }}"
    mode: "0644"
  loop_control:
    loop_var: template
  loop:
    - tinymediamanager.container
    - tinymediamanager.pod
    - tinymediamanager.network

- name: Generate environment file
  become: true
  become_user: "{{ tinymediamanager_user }}"
  notify: Restart tinymediamanager containers
  register: tinymediamanager_env_result
  ansible.builtin.template:
    src: "tinymediamanager.env"
    dest: "{{ tinymediamanager_home }}/.env"
    owner: "{{ tinymediamanager_user }}"
    group: "{{ tinymediamanager_group }}"
    mode: "0600"

- name: Reload systemd daemon
  become: true
  become_user: "{{ tinymediamanager_user }}"
  when: tinymediamanager_quadlet_result.changed or tinymediamanager_env_result.changed
  ansible.builtin.systemd:
    daemon_reload: true
    scope: user

- name: Validate quadlet files
  become: true
  become_user: "{{ tinymediamanager_user }}"
  changed_when: false
  ansible.builtin.command:
    cmd: /usr/lib/podman/quadlet -dryrun -user

- name: Create volumes
  become: true
  notify: Restart tinymediamanager containers
  ansible.builtin.file:
    path: "{{ volume }}"
    state: directory
    owner: "{{ tinymediamanager_user }}"
    group: "{{ tinymediamanager_group }}"
    mode: "0700"
  loop_control:
    loop_var: volume
  loop:
    - "{{ tinymediamanager_volume_data }}"

- name: Enable tinymediamanager containers
  become: true
  become_user: "{{ tinymediamanager_user }}"
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: true
    scope: user
  loop:
    - tinymediamanager-pod.service
    - tinymediamanager.service

- name: Expose tinymediamanager via Tailscale
  ansible.builtin.include_role:
    name: tailscale-serve-quadlet
  vars:
    tailscale_serve_quadlet_user: "{{ tinymediamanager_user }}"
    tailscale_serve_quadlet_group: "{{ tinymediamanager_group }}"
    tailscale_serve_quadlet_pod_name: "tinymediamanager"
    tailscale_serve_quadlet_service_name: "tinymediamanager"
    tailscale_serve_quadlet_service_port: 4000
    tailscale_serve_quadlet_hostname: "{{ tinymediamanager_hostname }}"
    tailscale_serve_quadlet_oauth_client_secret: "{{ tailscale_oauth_client_secret }}"
